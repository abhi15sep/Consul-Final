Overview of Consul Connect:
============================
Consul Connect provides service-to-service connection authorization and encryption using
mutual Transport Layer Security (TLS).

Sample Use-Case
Frontend Service wants to communicate with Backend Service.
Additional Requirements:
Should be over TLS (encrypted communication).
Should have required level of authorization.

Example:
Pre:Requisite: Selinux to Permissive:
setenforce 0
nano /etc/selinux/config
systemctl stop consul

Step 1: Configure Nginx:
yum -y install nginx

cd /etc/nginx/conf.d/
nano services.conf

server {
    server_name _;
    listen 8080;
    location / {
         proxy_pass http://127.0.0.1:5000;
}
  }

server {
    server_name _;
    listen 9080;
    root /usr/share/nginx/html/backend-service;
}

cd /usr/share/nginx/html
mkdir backend-service
cd backend-service
echo "Backend Service" > index.html
nginx -t
systemctl start nginx

Step 2: Create Service Definition:
Definition for Backend Service:

cd /tmp

nano backend-service.hcl

service {
  name = "backend-service"
  id = "backend-service"
  port = 9080

  connect {
    sidecar_service {}
  }

  check {
    id       = "backend-service-check"
    http     = "http://localhost:9080"
    method   = "GET"
    interval = "1s"
    timeout  = "1s"
  }
}

consul services register backend-service.hcl

nano frontend-service.hcl

service {
  name = "frontend-service"
  port = 8080

  connect {
    sidecar_service {
      proxy {
        upstreams = [
          {
            destination_name = "backend-service"
            local_bind_port  = 5000
          }
        ]
      }
    }
  }

  check {
    id       = "backend-service-check"
    http     = "http://localhost:8080"
    method   = "GET"
    interval = "1s"
    timeout  = "1s"
  }
}

consul agent -dev --client=0.0.0.0

consul services register frontend-service.hcl
consul services register backend-service.hcl

Step 3: Start Sidecar Proxy:
consul connect proxy -sidecar-for frontend-service > /tmp/frontend-service.log &
consul connect proxy -sidecar-for backend-service > /tmp/backend-service.log &
netstat -ntlp

Step 4: Verification:
curl localhost:8080
less /tmp/backend-service.log

Intentions and Precedence:
==========================
Intentions define access control for services via Connect and are used to control which services may establish connections or make requests. Intentions can be managed via the API, CLI, or UI.

CLI Command                             Description
consul intention create web db          Allow web to talk to db.
consul intention create -deny db "*"    Deny db from initiating connection to any service.
consul intention check web db           Checks Whether a connection attempt between two services would be authorized given the current set of intentions and consul configuration.
consul intention match db               Find all intentions for communicating to the "db" service.

Precedence:
Permission Precedence is applied top to bottom.
For any given request the first Permission to match in the list is terminal and stops further evaluation.

Examples:

Documentation Referred:
https://www.consul.io/docs/connect/intentions

Allow Service Communication
consul intention create frontend-service backend-service

Deny Service Communcation
consul intention create -deny frontend-service "*"

Verify the Authorization
consul intention check frontend-service backend-service

Match Intentions
consul intention match backend-service

Sidecar proxy Support in Consul:
================================
Consul includes its own built-in layer4 (L4) proxy for testing and development but also offers first class support for Envoy as sidecar proxy.
