Overview of Consul Connect:
============================
Consul Connect provides service-to-service connection authorization and encryption using
mutual Transport Layer Security (TLS).

Sample Use-Case
Frontend Service wants to communicate with Backend Service.
Additional Requirements:
Should be over TLS (encrypted communication).
Should have required level of authorization.

Example:
Pre:Requisite: Selinux to Permissive:
setenforce 0
nano /etc/selinux/config
systemctl stop consul

Step 1: Configure Nginx:
yum -y install nginx

cd /etc/nginx/conf.d/
nano services.conf

server {
    server_name _;
    listen 8080;
    location / {
         proxy_pass http://127.0.0.1:5000;
}
  }

server {
    server_name _;
    listen 9080;
    root /usr/share/nginx/html/backend-service;
}

cd /usr/share/nginx/html
mkdir backend-service
cd backend-service
echo "Backend Service" > index.html
nginx -t
systemctl start nginx

Step 2: Create Service Definition:
Definition for Backend Service:

cd /tmp

nano backend-service.hcl

service {
  name = "backend-service"
  id = "backend-service"
  port = 9080

  connect {
    sidecar_service {}
  }

  check {
    id       = "backend-service-check"
    http     = "http://localhost:9080"
    method   = "GET"
    interval = "1s"
    timeout  = "1s"
  }
}

consul services register backend-service.hcl

nano frontend-service.hcl

service {
  name = "frontend-service"
  port = 8080

  connect {
    sidecar_service {
      proxy {
        upstreams = [
          {
            destination_name = "backend-service"
            local_bind_port  = 5000
          }
        ]
      }
    }
  }

  check {
    id       = "backend-service-check"
    http     = "http://localhost:8080"
    method   = "GET"
    interval = "1s"
    timeout  = "1s"
  }
}

consul agent -dev --client=0.0.0.0

consul services register frontend-service.hcl
consul services register backend-service.hcl

Step 3: Start Sidecar Proxy:
consul connect proxy -sidecar-for frontend-service > /tmp/frontend-service.log &
consul connect proxy -sidecar-for backend-service > /tmp/backend-service.log &
netstat -ntlp

Step 4: Verification:
curl localhost:8080
less /tmp/backend-service.log

Intentions and Precedence:
==========================
Intentions define access control for services via Connect and are used to control which services may establish connections or make requests. Intentions can be managed via the API, CLI, or UI.

CLI Command                             Description
consul intention create web db          Allow web to talk to db.
consul intention create -deny db "*"    Deny db from initiating connection to any service.
consul intention check web db           Checks Whether a connection attempt between two services would be authorized given the current set of intentions and consul configuration.
consul intention match db               Find all intentions for communicating to the "db" service.

Precedence:
Permission Precedence is applied top to bottom.
For any given request the first Permission to match in the list is terminal and stops further evaluation.

Examples:

Documentation Referred:
https://www.consul.io/docs/connect/intentions

Allow Service Communication
consul intention create frontend-service backend-service

Deny Service Communcation
consul intention create -deny frontend-service "*"

Verify the Authorization
consul intention check frontend-service backend-service

Match Intentions
consul intention match backend-service

Sidecar proxy Support in Consul:
================================
Consul includes its own built-in layer4 (L4) proxy for testing and development but also offers first class support for Envoy as sidecar proxy.


Consul ACLs:
============
One of the biggest challenges as of now in Consul is the lack of Authentication.
To overcome this, Consul uses Access Control Lists (ACLs) to secure access to the UI, API, CLI, service communications, and agent communications.

Step 1: Enable ACL in Consul:
To enable ACLs, add the following ACL parameters to the agent's configuration file and then restart the Consul service.

acl = {
  enabled = true
  default_policy = "deny"
  enable_token_persistence = true
}

Step 2: Create a Bootstrap Token
It is important to have one token with unrestricted privileges in case of emergencies.
This will also allow you to quickly get started.
consul acl bootstrap

Important Note:
Using the token on the command line with the -token flag is not recommended, instead, you can
set it as an environment variable once.
CONSUL_HTTP_TOKEN

Example:
Step 1: Enabling ACLs
cd /etc/consul.d

nano agent.hcl

acl = {
  enabled = true
  default_policy = "deny"
  enable_token_persistence = true
}

Step 2: Create Bootstrap Token
consul acl bootstrap

Approach 1: Using Tokens with CLI Command
consul members -token "TOKEN-HERE"

Approach 2: Using Environement Variables
export CONSUL_HTTP_TOKEN=3a2c3d17-a6db-03db-a89b-15419aab68b1

ACL System in Consul:
=====================
The ACL is Capability-based, relying on tokens that are associated with policies to determine which fine-grained rules can be applied.
There are two primary components of the ACL system: ACL Policies & ACL Tokens

Developer ACL Policy                 ------------------> Token1
Allow write access to front-end service.
Allow read access to KV store.

Overview of Rules:
Rules are composed of a resource, a segment (for some resource areas), and a policy disposition.

<resource> "<segment>" {
    policy = "<policy disposition>"
}

key_prefix "mobiles/" {                 ------------------> write access on key-value store
  policy = "write"
}

Actions for Rule:
Action             Description
read               allow the resource to be read but not modified.
write              allow the resource to be read and modified.
deny               do not allow the resource to be read and modified.
list               allow access to all the keys under a segment in the consul KV

Scope for ACL Rules
Following resources are available for constructing rules:
Resource             Description
acl                  Operations for managing the acl system ACL API
agent                Utility Operations in the agent API, other than service and check registration
event                Listing and firing events in the Events API
key                  Key/Value store Operations in the KV store API
keyring              Keyring Operations in the Keyring API
node                 Node-level catalog operations in the Catalog API, Health API, Prepared query API, Network Coordinate API, and Agent API.
operator             Cluster-level catalog operations in the operator API, other than keyring API
etc                  Includes query, service and session.

Example:
Documentation:
https://www.consul.io/docs/security/acl/acl-rules

Step 1: Writing Demo Policies:
key_prefix "mobiles/" {
  policy = "read"
}

Step 2: Add an Explict Deny:
key_prefix "mobiles/samsung" {
  policy = "deny"
}

Step 3: Wildcard based access
key_prefix "" {
  policy = "read"
}

Understanding ACL Roles:
=======================
Roles allow for the grouping of a set of policies into a reusable higher-level entity that can be applied to many tokens. 

Anonymous Tokens:
=================
The anonymous token is used when a request is made to Consul without specifying a bearer token.
The anonymous token's description and policies may be updated but Consul will prevent this token's deletion.

Example:
service_prefix "" {
  policy = "read"
}
key_prefix "" {
  policy = "read"
}
node_prefix "" {
  policy = "read"
}

Enabling ACLs on Agent:
======================
When you enable ACLs with a “deny” based approach, by default requests will be denied.
This applies even at the agent level.

Step 1: Create Policy for Agent Token
Create the following policy for agent token
node_prefix "" {
  policy = "write"
}
service_prefix "" {
   policy = "read"
}

Step 2: Add token in Configuration
Add the agent token within the configuration
acl = {
  enabled = true
  default_policy = "deny"
  enable_token_persistence = true
  tokens {
    "agent" = "f1f30bb8-af83-ac3e-8944-efe03d782ac6"
  }
}


Example:
Documentation Referred:
https://www.consul.io/docs/security/acl/acl-system

Step 1: Create following policy
node_prefix "" {
  policy = "write"
}
service_prefix "" {
   policy = "read"
}

Step 2: Add token within configuration file:
acl = {
  enabled = true
  default_policy = "deny"
  enable_token_persistence = true
  tokens {
    "agent" = "f1f30bb8-af83-ac3e-8944-efe03d782ac6"
  }
}

Step 3: Verification:
systemctl restart consul
journalctl -u consul

Step 4: DNS Check:
dig @localhost -p 8600 consul.service.consul

Anonymous Policy:
node_prefix "" {
  policy = "read"
}
service_prefix "" {
  policy = "read"
}
query_prefix "" {
  policy = "read"
}

dig @localhost -p 8600 consul.service.consul


Overview of Gossip Protocol:
============================
Overview of Unicast and MultiCast:
A Unicast transmission/stream sends IP packets to a single recipient on a network.
Multicast transmission sends IP packets to a group of hosts on a network.

Multi-Cast Challenges:
Suppose a sender wants to send a message to a group of hosts. The hosts might not receive the message due to various issues like network connectivity, the host being down, and so on.
It can also be possible that the sender of the message went down.

Gossip Protocol:
Data is periodically transmitted to random targets. In the below case, the sender has sent the message to R1.
S -----> R1(infected by the gossip)
Once R1 receives the message, it is referred to as infected by the gossip.
Once R1 receives the message, it chooses random targets and sends out copies of the message.
S -----> R1 -----> R2
In the final stage, all the hosts will have the data.
S -----> R1 -----> R2 -----> R3 ------> R4

Understanding Gossip Protocol:
A gossip protocol is a procedure or process of computer peer-to-peer communication.
The amount of overhead involved is not that high when compared to a non-gossip scenario.
Some ad-hoc networks have no central registry and the only way to spread common data is to rely on each member to pass it along to their neighbors.


Gossip Encryption in Consul:
============================ 
Consul and Gossip Protocol:
Consul uses a gossip protocol to manage membership and broadcast messages to the cluster

Challenge with Plain Text Data:
By default, the data would be in plaintext and it is possible to capture the network packets and retrieve the information.

Enabling Encryption:
As part of security, it is important to enable gossip encryption.
Two steps:
1) Generate a cryptographic key.
2) Add key within the configuration file.

Step 1: Generate Cryptographic Key
We can easily generate a key with the consul keygen command.
> consul keygen

Step 2: Add Key in Configuration File
Add the encryption key parameter to the agent configuration file.
> cd /etc/consul.d
> nano consul.hcl
data_dir = "/etc/consul.d/consul-dir"
bind_addr = "159.65.145.160"
client_addr = "0.0.0.0"
bootstrap_expect = 1
node_name = "consul-server"
ui = true
server = true
encrypt = "KEY-HERE"

Configuring Gossip for Existing Datacenter:
Gossip encryption can also be enabled on existing data centers but requires several extra steps.
The additional configuration of the agent configuration parameters, encrypt_verify_incoming and encrypt_verify_outgoing is necessary
data_dir = "/etc/consul.d/consul-dir"
bind_addr = "159.65.145.160"
client_addr = "0.0.0.0"
bootstrap_expect = 1
node_name = "consul-server"
ui = true
server = true
encrypt = "KEY-HERE"
encrypt_verify_incoming = true
encrypt_verify_outgoing = true

Important Note:
TCP and UDP protocol can be used for Gossip.
Port Number: 8301

Example:
Step 1: Generate Cryptographic Key:
consul keygen

Step 2: Add appropriate paremeter within configuration

Approach 1 (DEV Agent Mode):
systemctl stop consul
consul agent -dev -client=0.0.0.0 -bind 134.209.155.89 -encrypt [KEY-HERE]
consul agent -bind 165.22.222.190 -join 134.209.155.89  -data-dir /root/consul -encrypt [KEY-HERE]

Approach 2 (Configuration File) - Run both on server and client :
cd /etc/consul.d
nano consul.hcl
encrypt = "KEY-HERE"

Step 3: Start & Verify Agent
systemctl start consul

Miscellenous Commands:
yum -y install tcpdump
tcpdump -i any port 8301
tcpdump -i any port 8301 -vv -X

Gossip encryption in existing DC:
=================================
Gossip encryption can also be enabled on existing data centers but requires several extra steps.
The additional configuration of the agent configuration parameters, encrypt_verify_incoming and encrypt_verify_outgoing is necessary
Step1: Generate the keygen
Step2: Set encrypt_verify_incoming and encrypt_verify_outgoing to false and restart.
Step3: Set encrypt_verify_outgoing to true and restart.
Step4: Set encrypt_verify_incoming to true and restart.

Configuration parameter:

1. Agents will be able to decrypt gossip but will not yet be able to send encrypted traffic.
encrypt = "ER5awGvrbkd25fO67Q4SktzZwSwR/F2SFQMExXmFlUE=",
encrypt_verify_incoming = false,
encrypt_verify_outgoing = false

2. The agents will now be sending encrypted gossip but will still allow incoming unencrypted traffic.
encrypt = "ER5awGvrbkd25fO67Q4SktzZwSwR/F2SFQMExXmFlUE=",
encrypt_verify_incoming = false,
encrypt_verify_outgoing = true

3. All the agents will now be strictly enforcing encrypted gossip. 
encrypt = "ER5awGvrbkd25fO67Q4SktzZwSwR/F2SFQMExXmFlUE=",
encrypt_verify_incoming = true,
encrypt_verify_outgoing = true

Example:

consul-server:
data_dir =  "/etc/consul.d/consul-dir"
client_addr = "0.0.0.0"
bind_addr   = "159.65.145.160"
bootstrap_expect = 1
node_name = "consul-server"
ui = true
server = true

consul-client:
cat consul.hcl

data_dir =  "/etc/consul.d/consul-dir"
bind_addr = "134.209.154.246"
node_name = "consul-02"
start_join = ["159.65.145.160"]
enable_local_script_checks = true

Service Definition:
cat web.hcl

{
  "service": {
    "name": "web",
    "port": 80,
    "check": {
    "args": [
        "curl",
        "127.0.0.1"
      ],
      "interval": "10s"
    }
  }
}
Make sure nginx is running or you can disable script checks .

Our sample key:
ER5awGvrbkd25fO67Q4SktzZwSwR/F2SFQMExXmFlUE= OR consul keygen

Step 1: Set both flags to false
encrypt = "ER5awGvrbkd25fO67Q4SktzZwSwR/F2SFQMExXmFlUE=",
encrypt_verify_incoming = false,
encrypt_verify_outgoing = false

systemctl restart consul

Step 2: Set outgoing to true
encrypt = "ER5awGvrbkd25fO67Q4SktzZwSwR/F2SFQMExXmFlUE=",
encrypt_verify_incoming = false,
encrypt_verify_outgoing = true

systemctl restart consul

Step 3: Set incoming to true
encrypt = "ER5awGvrbkd25fO67Q4SktzZwSwR/F2SFQMExXmFlUE=",
encrypt_verify_incoming = true,
encrypt_verify_outgoing = true
systemctl restart consul


Rotating gossip keys:
====================
As part of compliance and security best practices, its important to regularly rotate the encryption keys.

Rotating gossip encryption keys:
The consul keyring command is used to examine and modify the encryption keys used in Consul's gossip pool.
It is capable of distributing new encryption keys to the agents, retiring old encryption keys, and changing the keys used by the agents to encrypt message.
> consul keyring -list (List current set of keys)

There are 4 primary steps for the entire process of gossip key rotation:
1. Genrate a new encryption key.
2. Add new key to the keyring.
3. Promote new key to primary.
4. Remove old key from the keyring.

Important Pointers:
The encrypt parameter is needed only at join time and after that the agent will persist whatever data it needs in the local keyring.
If you later remove the encrypt parameter from the configuration file, it will not have an impact.

Example:
List current set of keys
consul keyring -list

Generate new encryption key
consul keygen

Add new key to the keyring
consul keyring -install [NEW-CONSUL-KEY]

Verify if new key is installed
consul keyring -list

Promote new key to primary
consul keyring -use NEW-KEY

Remove Older key
consul keyring -remove [OLD-KEY]


Introduction to Asymmetric Key Encryption:
==========================================
Asymmetric cryptography uses public and private keys to encrypt and decrypt data.

One key in the pair can be shared with everyone; it is called the public key. The other key in the pair is kept secret; it is called the private key.

Either of the keys can be used to encrypt a message; the oppo

Use-Case of Asymmetric Key Encryption:
Step 1
User zeal wants to log in to the server. Since the server uses a public key authentication,
instead of taking the password from the user, the server will verify if the User claiming to be zeal
actually holds the right private key.

Step 2
The server creates a simple challenge, 2+3=? and encrypts this challenge with the Public Key of
the User and sends it back to the User. The challenge is sent in an encrypted format.

Step 3:
Since the user zeal holds the associated private key, he will be able to decrypt the message and
compute the answer, which would be 5. Then, he will encrypt the message with the private key
and send it back to the server.

Step 4:
The server decrypts the message with the user's Public Key and checks if the answer is correct.
If yes, then the server will send an Authentication Successful message and the user will be able
to log in.

Protocols:
Because of the advantage that it offers, Asymmetric key encryption is used by a variety of
protocols.Some of these include:
PGP
SSH
Bitcoin
TLS
S/MIME

RPC Encryption with TLS:
========================
Consul & RPC:
Consul Client and Server communicate over RPC on port 8300.

Challenges with Plain Text Data:
By default, the data would be in plaintext and it is possible to capture the network packets and retrieve the information.

Enabling Encryption:
As part of security, it is important to enable RPC encryption.
Three steps:
Initialize In-Built CA
Create Server Certificates.
Configure Servers and Clients.

Certificate Authority:
Certificate Authority is an entity that issues digital certificates.
The key part is that both the receiver and the sender trusts the CA.

Overview Steps Involved:
Step 1: Initialize Built-In CA
You can use the in-built CA provided by the Consul or make use of 3rd party private CAs.
> consul tls ca create

Step 2: Create Server Certificates
You can create the server certificates easily using in-built CA.
> consul tls cert create -server

Step 3: Configure Server & Clients
Add appropriate configuration parameters within the configuration file to make use of certificates.
> See steps 3, 4 and 5 in example section.

Methods for Distributing Certificates:
There are two methods for distributing client certificates: operator and auto encryption
1) With auto-encryption, you can configure the Consul servers to automatically distribute certificates to the clients.
2) The operator method is recommended if you need to use a third-party CA

Example:
Step 1: Initialize Built-In CA
consul tls ca create

Step 2: Create Server Certificates:
consul tls cert create -server

Step 3: Copy the CA Certificate to client
base64 -i consul-agent-ca.pem (server)
cd /tmp (client)
nano tmp.txt (Paste the base64 encoded and save)
cat tmp.txt | base64 -d > /etc/consul.d/consul-agent-ca.pem

Step 4: Configure Server Configuration:
cd /etc/consul.d
nano consul.hc

verify_incoming = true,
verify_outgoing = true,
verify_server_hostname = true,
ca_file = "/etc/consul.d/consul-agent-ca.pem",
cert_file = "/etc/consul.d/dc1-server-consul-0.pem",
key_file = "/etc/consul.d/dc1-server-consul-0-key.pem",
auto_encrypt {
  allow_tls = true
}

chown -R consul.consul .
systemctl start consul

Step 5: Configure Client Configuration:
cd /etc/consul.d
nano consul.hc

verify_incoming = false,
verify_outgoing = true,
verify_server_hostname = true,
ca_file = "consul-agent-ca.pem",
auto_encrypt = {
  tls = true
}

chown -R consul.consul .
systemctl start consul

Step 6: Verfication:
tcpdump -i any port 8300 -vv -X
consul kv get sensitive-data

Important TLS Configuration:
============================
While using the auto_encrypt method for RPC encryption use-case, we had added 3 parameters within the configuration file:

verify_incoming = false:
If set to "true", Consul requires that all incoming connections make use of TLS and that the client provides a Certificate signed by a Certificate Authority from the ca_file or ca_path.

verify_outgoing = true:
If set to "true", Consul requires that all outgoing connections from this agent make use of TLS and that the server provides a Certificate signed by a Certificate Authority from the ca_file or ca_path.

verify_server_hostname = true:
If set to "true", Consul verifies for all outgoing TLS connections that the TLS Certificate presented by the servers matches server.<datacenter>.<domain> hostname.


Overview of Verify server hostname:
In order to authenticate consul servers, servers are provided with a special certificate - one that contains server.dc1.consul in the Common Name and in the Subject Alternative Name.
If you enable verify_server_hostname, only agent provides such certificate are allowed to boot as server.
> openssl x509 -in dc1-server-consul-0.pem -noout -text
This configuration is critical to prevent a compromised client from being restarted as server.

Certificate Creation:
The tls cert create command is used to create certificates for your Consul TLS setup.

consul tls cert create -server - Generate server certificate
consul tls cert create -client - Generate client certificate

HTTP API in Consul:
=================

Overview of Consul Interface:
There are multiple ways to connect with Consul:
GUI, API as well as CLI

HTTP API:
The main interface to Consul is a RESTful HTTP API.
All API routes are prefixed with /v1/

Important Pointers:
Depending on the resource on which operation needs to be performed, the endpoint changes.
The API documentation provides extensive information about the same.
By default, the output of all HTTP API requests is minimized JSON. If the client passes pretty on the query string, formatted JSON will be returned.

Authentication:
When authentication is enabled, a Consul token should be provided to API requests using the X-Consul-Token header or with the Bearer scheme in the authorization header.
> curl --header "X-Consul-Token: <consul token>" http://127.0.0.1:8500/v1/agent/members
> curl --header "Authorization: Bearer <consul token>" http://127.0.0.1:8500/v1/agent/members

Example:

Documentation Referred:
https://www.consul.io/api-docs

Commands and URLs:
/v1/catalog/nodes
/v1/catalog/nodes?pretty
curl http://127.0.0.1:8500/v1/kv/course
curl --request DELETE http://127.0.0.1:8500/v1/kv/course