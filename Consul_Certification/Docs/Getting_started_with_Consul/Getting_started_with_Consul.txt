Overview of Consul:
===================
Consul is a service mesh solution providing a full-featured control plane with service discovery,
configuration, and segmentation functionality.
a) service discovery - Service Discovery is the way in which microservices can locate each other on the network.
b) KV Store - Consul with health check functionality will only keep the healthy instances related data within its
database.
c) Health Checking - Key-Value store is generally used for storing the service configuration and other meta-data.
d) Secure service Communication - Sidecar proxies can be used to automatically establish TLS connections for inbound and
outbound connections.

Start Consul in Dev Mode:
=========================
consul agent -dev -client=0.0.0.0
Important Note:
Make sure to allow only your IP to connect to the server in Firewall.

a) The Dev agent mode in Consul is useful for local development, testing, and exploration.
b) Not very secure.
c) In-memory mode

Consul Architecture:
====================
There are two primary components:

Consul Server - Consul Server is primarily responsible for maintaining the cluster state, as well as responding to queries received from clients.
Consul Client - The client is primarily responsible for making requests to the server and are also used for performing health check.

Overview of Consul Agent:
=======================
An agent is a long-running daemon on every member of the Consul cluster.
The agent is able to run in either client or server mode.
Since all nodes must be running an agent, it is simpler to refer to the node as being either a client or server

Consul Datacenter:
=================
A datacenter is a networking environment that is private, low latency, and high bandwidth.
This excludes communication that would traverse the public internet.
Multiple Availability Zone within a single AWS region would be considered part of a single datacenter.

To see the list of members of consul clusters:
consul members

Joining Consul Clients:
=======================
To join clients to consul cluster, the following command needs to be used:
consul agent -join 1.2.3.4 -bind 5.6.7.8 -data-dir /path/dir
where:
-join 1.2.3.4 - (Server) Address of another agent to join upon starting up.
-bind 5.6.7.8 - (Client) This is an IP address that should be reachable by all other nodes in the cluster.
-data-dir /path/dir - This is required for all agents. The directory should be durable across reboots.All used for storing cluster state.

Pre-Requisite: Consul Server should be up and running with following syntax
consul agent -dev -client=0.0.0.0 -bind [SERVER-IP]

Client:
consul agent -join [SERVER-IP] -bind [CLIENT-IP] -data-dir [PATH-TO-FOLDER]
Example:
consul agent -join 134.209.155.89 -bind 165.22.222.190 -data-dir /root/consul

Remote Execution Functionality:
============================== 
Remote Execution can be used to run a certain set of commands to perform the desired action.

The feature of remote execution is achieved with the ​ consul exec​ command.
consul exec ping google.com

Important Note:
Remote Execution is disabled by default.
You will need to explicitly enable it at the node level to make use of it.
Following is the command to Enable Remote Execution:
consul agent -hcl 'disable_remote_exec=false'

Example:
Step 1 Run following command in consul-01 (Agent in Dev Server Mode):
consul agent -dev -client=0.0.0.0 -bind [SERVER-IP] -hcl 'disable_remote_exec=false'
Step 2: Run following command in consul-02 (Client)
consul agent -join [DEV-AGENT-IP] -bind [CURRENT-NODE-IP] -data-dir /root/consul -hcl 'disable_remote_exec=false'
Step 3: Verification:
consul exec ping -c1 google.com

Configuration Directory:
========================
Running Consul from CLI with multiple command-line options is not a very scalable and efficient
way of doing things.
consul agent -join 134.209.155.89 -bind 165.22.222.190 -data-dir /root/consul -hcl 'disable_remote_exec=false'

Using a Configuration Directory Approach:
The agent has various configuration options that can be specified via the command-line or via
configuration files.Configuration can either be in JSON or HCL format.

Documentation Referred:
https://www.consul.io/docs/agent/options.html#_join

Custom Configuration Directory:
mkdir /root/consul-new-config
cd /root/consul-new-config
yum -y install nano
nano consul.hcl

data_dir =  "/root/consul"
start_join = ["SERVER-IP-HERE"]
bind_addr = "CLIENT-IP-HERE"

Start the Agent:
consul agent -config-dir=/root/consul-new-config/

Important Note - Configuration Directory:
The CLI and Configuration File options are not always named the same.

CLI Command:      Configuration File:
join                start_join
bind                bind_addr
data-dir            data_dir


Leave Behavior for Agents:
==========================
Whenever we go somewhere, we generally inform parents/spouse about it.
If you do not inform, be prepared to sit on the couch for an hour or two listening to what could
have been improved.

There are two primary leave behavior for an agent in Consul:
a) Graceful Exit: It is used to ensure other nodes see the agent as "left" instead of "failed". When gracefully exiting, the agent first notifies the cluster it intends to leave the cluster.
b) Force removal: When server simpily fails (power/network cut). Datacenter will detect the failure and replication will contineously retry.

To gracefully halt an agent, send the process an interrupt signal (usually Ctrl-C from a terminal
or running ​ killall -s 2 consul

Forceful removal can be achieved by sending SIGKILL signal
killall -s 9 consul

Example:
Start Consul Agent in DEV Mode (consul-01):
consul agent -dev -client=0.0.0.0 -bind=134.209.155.89

Start Consul Agent in Client Mode (consul-02)
consul agent -join 134.209.155.89 -bind 165.22.222.190 -data-dir /root/consul

To forcefully exit:
killall -s 9 consul

To gracefully exit:
killall -s 2 consul

Consul Server Mode:
===================
Running consul in server mode (non-dev) allows customers to have flexibility related to the
option sets that can be used.

Flags:                Description:
server                 Providing this flag specifies that you want the agent to start in server mode.
-bootstrap-expect      This tells the Consul server how many servers the datacenter should have in total.
-node                  Each node in a datacenter must have a unique name. By default, Consul uses the hostname of the machine, but you'll manually override it, and set it to agent-one.
-bind and -data-dir    Address agent will listen and storing state data.
config-dir             This flag tells consul where to look for its configuration. Standard location is /etc/consul.d

Example:
Start Consul in Server Mode
consul agent -server -bootstrap-expect=1 -node=consul-server -bind=[SERVER-IP] -data-dir=/tmp/consul -client=0.0.0.0 -ui=true

Making use of Configuration Directory
data_dir =  "/root/consul"
bind_addr = "SERVER-IP"
client_addr = "0.0.0.0"
bootstrap_expect = 1
node_name = "consul-server"
ui = true
server = true

Start Consul Agent
consul agent --config-dir /root/consul-server-config/

Systemd and Consul:
==================
Overview of Challenges:
As of now, we have been deploying Consul either via CLI flags or via Configuration Directory.
Although this is a good approach for an initial start, but for production, it is not an ideal
approach.

Systemd Based Approach:
Systemd provides a system and service manager that runs as PID 1 and starts the rest of the
system.You can specify a service file with all the configuration and settings and systemd will manage
the consul process accordingly.

Example:
Backing up the default consul config:
cd /etc/consul.d
mv consul.hcl consul.hcl.bak

Add new consul configuration:
nano consul.hcl

start_join = ["SERVER-IP"]
bind_addr = "CURRENT-NODE-IP"
data_dir = "/etc/consul.d/consul-dir"
chown consul.consul consul.hcl

Verification Stage:
systemctl start consul
systemctl status consul
systemctl enable consul
reboot
systemctl status consul

To check the logs:
journalctl -u consul

